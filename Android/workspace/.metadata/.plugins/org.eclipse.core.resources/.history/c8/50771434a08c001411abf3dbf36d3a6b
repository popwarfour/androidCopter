package com.example.arduinotest;

import java.io.BufferedOutputStream;
import java.util.List;

import android.hardware.Camera;
import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.SeekBar;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import java.io.BufferedInputStream;
import java.nio.ByteBuffer;

import android.hardware.SensorEvent;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;

import com.example.arduinotest.USBControl;
import com.example.arduinotest.Util;
import com.example.arduinotest.MainActivity;
import com.example.arduinotest.R;

import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.util.List;

import java.nio.ByteBuffer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.Character.*;

public class ServerActivity extends Activity implements SensorEventListener
{
	//Handler, Threads
	private USBControlServer usbConnection;
	
	ByteBuffer msg = ByteBuffer.allocate(36);
	
	//Protocol Messages Indexes
	int SPEED = 0;
	int GYRO_X = 0;
	int GYRO_Y = 0;
	int YAW = 0;
	int STEER_YAW = 0;
	int STEER_PITCH = 0;
	int STEER_ROLL = 0;
	
	int counter = 0;
	
	long timeMills = 0;
	
	//Local Variables
    float[] currentOrientation = new float[4];
    float xOffset = 0;
    float yOffset = 0;
    private SensorManager sensorManager = null;
    
	//Network
	private static String defaultIp="10.0.1.5";
	public static final int controlPort = 9090;// DESIGNATE A PORT
	private Handler UIHandler = new Handler();
	private RemoteControlServer remoteConnection;
	
    private ServerSocket ss; 
    private Socket socket; 
    private BufferedReader in; 
    private PrintWriter out; 

    @Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		
		sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
		
		timeMills = System.currentTimeMillis();
		
		setContentView(R.layout.activity_server);
		
		// ------------ UI WIDGETS -----------------
		//Calibration
		final Button buttonLeft = (Button) findViewById(R.id.calibrateGyro);
        buttonLeft.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
            	xOffset = currentOrientation[0] * -1;
            	yOffset = currentOrientation[1] * -1;
            }
        });
        
        final Button powerOnServer = (Button) findViewById(R.id.powerOnServer);
        powerOnServer.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
            	if(remoteConnection != null)
            	{
            		if(!remoteConnection.connected)
            		{
                    	remoteConnection = new RemoteControlServer(controlPort, UIHandler);
            		}
            		else
            		{
                    	try {
							remoteConnection.disconnect();
							remoteConnection = null;
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
            		}
            	}
            	else
            	{
            		remoteConnection = new RemoteControlServer(controlPort, UIHandler);
            	}
            }
        });
        
        //Speed
        final SeekBar speedBar = (SeekBar) findViewById(R.id.speedBar);
        speedBar.setOnSeekBarChangeListener( new OnSeekBarChangeListener()
        {
        	public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser)
        	{
        		SPEED = progress;        		
        		packageDataAndSend();
            }

			@Override
			public void onStartTrackingTouch(SeekBar seekBar) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onStopTrackingTouch(SeekBar seekBar) {
				// TODO Auto-generated method stub
				
			}
        });

        //setup usb hard button
		final Button button2 = (Button) findViewById(R.id.setupUSBButton);
        button2.setOnClickListener(new View.OnClickListener()
        {
            public void onClick(View v)
            {
            	updateTextStatus("SETTING UP USB");
            	setupUSB();
            }
        });
        
        setupUSB();		
	}
    
    public void packageDataAndSend()
    {
		if(usbConnection != null)
		{		
			
			msg.putInt((int)GYRO_X);
		    msg.putInt((int)GYRO_Y);
		    msg.putInt((int)SPEED);
		    msg.putInt((int)YAW);
		    msg.putInt((int)STEER_YAW);
		    msg.putInt((int)STEER_PITCH);
		    msg.putInt((int)STEER_ROLL);
		    msg.rewind();
		    
		    System.out.println(msg.capacity());
		    
		    byte[] temp = msg.array();
			
			//Send Byte[]
	       	usbConnection.send(temp);
	       	
	       	//Reset Steering...
	       	resetSteeringVariables();
	   	}
	   	else
	   	{
	   		updateStatus("usbConnection is null....");
	    }
    }
    
    public void resetSteeringVariables()
    {
    	STEER_YAW = 0;
    	STEER_PITCH = 0;
    	STEER_ROLL = 0;
    }
    
    
    // ------ SENSOR METHODS -----------
 	public void onSensorChanged(SensorEvent event) {
 		if(event.sensor.getType() == Sensor.TYPE_GRAVITY)
 	    {
 	    	getGryoscope(event);
 	    }
 		else if(event.sensor.getType() == Sensor.TYPE_ORIENTATION)
 	    {
 			getAzimuth(event);
 	    	//getMagneticField(event);
 	    }
 	}
 	
 	public static byte [] float2ByteArray (float value)
 	{  
 	     return ByteBuffer.allocate(4).putFloat(value).array();
 	}
 	
 	public float map(float axisX, long in_min, long in_max, long out_min, long out_max)
 	{
 	  return (axisX - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 	}
 	
 	private void getAzimuth(SensorEvent event)
 	{
 		YAW = (int)event.values[0];
 		
 		TextView zValue = (TextView) findViewById(R.id.zValue);
		String degreeString = String.format("" + YAW);
		zValue.setText(degreeString);
 		packageDataAndSend();
 	}
 	
 	private void getMagneticField(SensorEvent event)
	{
		float[] values = event.values;
		
		double radians = Math.atan(values[0]/values[1]); 
		double degrees = Math.toDegrees(radians);
		
		if(values[0] < 0 && values[1] <= 0)
		{
			//R2
			degrees = (90 - degrees) + 90;
		}
		else if(values[0] < 0 && values[1] > 0)
		{
			//R1	
			degrees *= -1;
		}
		else if(values[0] >= 0 && values[1] < 0)
		{
			//R3
			degrees = (90 - degrees) + 90;
		}
		else if(values[0] > 0 && values[1] >= 0)
		{
			//R4
			degrees = (90 - degrees) + 270;
		}
		
		
		TextView zValue = (TextView) findViewById(R.id.zValue);
		String degreeString = String.format("Degrees: %.1f | X: %.1f Y: %.1f", degrees, values[0], values[1]);
	    zValue.setText(degreeString);

		
	    YAW = (int)degrees;
	    
	    packageDataAndSend();
	}
 	
 	public void updateMsgView(String msg)
	{
 		/*
 		if(msg.equals("yl"))
 		{
 			System.out.println("YAW LEFT");
 		}
 		else if(msg.equals("yr"))
 		{
 			System.out.println("YAW RIGHT");
 		}
 		else if(msg.equals("pf"))
 		{
 			System.out.println("PITCH FORWARD");
 		}	
 		else if(msg.equals("pb"))
 		{
 			System.out.println("PITCH BACKWARD");
 		}
 		else if(msg.equals("rr"))
 		{
 			System.out.println("ROLL RIGHT");
 		}
 		else if(msg.equals("rl"))
 		{
 			System.out.println("ROLL LEFT");
 		}
 		else
 		{
 			String[] all = msg.split("=");
 			System.out.println("THROTTLE: " + all[1]);
 		}*/
 		

 		TextView connectionStatus = (TextView) findViewById(R.id.incomingMessageLabel);
 		connectionStatus.setText("" + msg);
 		
 		/*
 		StringBuilder sb = new StringBuilder();
 		String parseMsg = sb.substring(0, 1);
 		if(connectionStatus.getText().equals("yr") && parseMsg.equals("yr"))
 		{
 			counter++;
 			sb.append(counter);
 			connectionStatus.setText("" + sb.toString());
 		}
 		else if(connectionStatus.getText().equals("yl") && parseMsg.equals("yl"))
 		{
 			counter++;
 			sb.append(counter);
 			connectionStatus.setText("" + sb.toString());
 		}
 		else
 		{
 			counter = 0;
 	 		connectionStatus.setText("" + msg);
 		}*/
 		
	  }
	  
 	
 	private void getGryoscope(SensorEvent event)
 	{
		float[] values = event.values;
		// Movement
		float x = values[0];
		float y = values[1];
		
		TextView xValue = (TextView) findViewById(R.id.xLabel);
		xValue.setText("" + x);
		
		TextView yValue = (TextView) findViewById(R.id.yLabel);
		yValue.setText("" + y);
		    
		currentOrientation = event.values;
		float axisX = event.values[0];
		float axisY = event.values[1];
       
       	int tempX = (int)Math.round(axisX * 10);
       	int tempY = (int)Math.round(axisY * 10);
	       	
       	GYRO_X = tempX;
       	GYRO_Y = tempY;
       	
       	packageDataAndSend();
	 }
 	    
 	  
 	 @Override
	  protected void onResume() {
	    super.onResume();
	    // register this class as a listener for the orientation and
	    // accelerometer sensors
	    sensorManager.registerListener(this, sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY), SensorManager.SENSOR_DELAY_FASTEST);
	    sensorManager.registerListener(this,sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),SensorManager.SENSOR_DELAY_FASTEST);
	  }

	  @Override
	  protected void onPause() {
	    // unregister listener
	    super.onPause();
	    sensorManager.unregisterListener(this);
	  }
	
	public void setupUSB()
	{
		updateTextStatus("SETUP USB CALLEd");
		usbConnection = new USBControlServer(UIHandler);
	}

	public void createUI()
	{
		updateArduinoStatus(false);
	}
	
	public void updateStatus(String statusMsg)
	{
		TextView textView = (TextView) findViewById(R.id.arduinoConnection);
	    textView.setText(statusMsg);
	}
	
	public void updateArduinoStatus(boolean status)
	{
		/*
		if(status == true)
		{
			TextView textView = (TextView) findViewById(R.id.arduinoConnection);
		    textView.setText("Connected");
		}
		else
		{
			TextView textView = (TextView) findViewById(R.id.arduinoConnection);
		    textView.setText("Not Connected");
		}
		*/
	}
	
	public void updateTextStatus(String status)
	{
		TextView textView = (TextView) findViewById(R.id.arduinoConnection);
	    textView.setText(status);
	}
	
	// --------- NETWORKING SERVER ----------
	private class RemoteControlServer extends RemoteControl
	{
		RemoteControlServer(int port, Handler ui)
		{
			super(port, ui);
		}
		
		public class BridgeThread implements Runnable
		  {
			  String[] msgArray = null;
			  public BridgeThread(String[] msg)
			  {
				  msgArray = msg;
			  }
		
			  public void run()
			  {
				  runOnUiThread(new Runnable()
				  {	
					  @Override
					  public void run()
					  {
						  updateMsgView(msgArray[0]);
					  }
				  });
			  }
		  }

		@Override
		public void onReceive(String[] msg)
		{
			if(msg[0].equals("yl"))
			  {
				  System.out.println("YAW LEFT");
				  STEER_YAW = -10;
			  }
			  else if(msg[0].equals("yr"))
			  {
				  System.out.println("YAW RIGHT");
				  STEER_YAW = 10;
			  }
			  else if(msg[0].equals("pf"))
			  {
				  System.out.println("PITCH FORWARD");
				  STEER_PITCH = 10;
			  }
			  else if(msg[0].equals("pb"))
			  {
				  System.out.println("PITCH BACKWARD");
				  STEER_PITCH = -10;
			  }
			  else if(msg[0].equals("rr"))
			  {
				  System.out.println("ROLL RIGHT");
				  STEER_ROLL = 10;
			  }
			  else if(msg[0].equals("rl"))
			  {
				  System.out.println("ROLL LEFT");
				  STEER_ROLL = -10;
			  }
			  else
			  {
				  String[] all = msg[0].split("=");
				  System.out.println("THROTTLE: " + all[1]);

				  SPEED = Integer.parseInt(all[1]);
			  }
			
			packageDataAndSend();
			
			BridgeThread bridgeTest = new BridgeThread(msg);
			bridgeTest.run();
		}

		@Override
		public void onNotify(String msg)
		{
			
		}
		
		@Override
		public void onConnected()
		{
			TextView textView = (TextView) findViewById(R.id.networkConnection);
		    textView.setText("Connected To iOS");
		}

		@Override
		public void onDisconnected()
		{
			TextView textView = (TextView) findViewById(R.id.networkConnection);
		    textView.setText("Disconnected From iOS");
		}

		@Override
		public void onStart()
		{
			TextView textView = (TextView) findViewById(R.id.networkConnection);
		    textView.setText("Server Started");
		}

		@Override
		public void onShutdown()
		{
			
		}
	}
	
	//------ USB CONNECTION -------
	public class USBControlServer extends USBControl
	{
		public USBControlServer(Handler ui)
		{
			super(getApplicationContext(), ui);
		}

		@Override
		public void onReceive(byte[] msg)
		{
			int i = 0;
			
			switch (msg[i+1])
			{
				//case LED_8:
					//break;
			}
		}

		@Override
		public void onNotify(String msg)
		{
			console(msg);
		}

		@Override
		public void onConnected()
		{
			
		}

		@Override
		public void onDisconnected()
		{
			
		}

		byte[] msg = new byte[3];
	}
	
	public void console (final Object msg)
	{
		UIHandler.post(new Runnable()
		{
			@Override
			public void run()
			{
				System.out.println(msg.toString());
			}
		});
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	}
}
